# -*- coding: utf-8 -*-
"""Final Exam Solns.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l8QJRhBDUKkvVOHHEdajwpz8F7RP-0ha
"""

# Task one
print("Enter item price")
item_price = int(input())
print("Enter how much paid")
how_much_paid = int(input())
amount = how_much_paid - item_price
d = []
while amount > 0:
    if amount >= 20:
        amount = amount-20
        d.append(20)
    else:
        if amount >= 10:
            amount = amount-10
            d.append(10)
        else:
            if amount >= 5:
                amount = amount-5
                d.append(5)
            else:
                if amount >= 2:
                    amount = amount-2
                    d.append(2)
                else:
                    if amount >= 1:
                        amount = amount-1
                        d.append(1)
                    else:
                        print("Something went wrong")
for i in range(0, len(d)):
    print(d[i])

# Task Two
def max_val(t):
    """
    t, tuple or list
    Each element of t is either an int, a tuple, or a list
    No tuple or list is empty
    Returns the maximum int in t or (recursively) in an element of t
    """
    if isinstance(t, int):  # Base case: if t is an integer, return t
        return t
    else:
        # Recursively find the maximum in each element of t and return the maximum of those values
        return max(max_val(element) for element in t)

# Example usage:

#print(max_val((9, (1, 2), [[1], [2]])))  # returns 5
#print(max_val((5, (1, 2), [[1], [20]])))  # returns 9

# Task Three
def max_product_subarray(nums):
    if not nums:
        return 0

    # Initialize variables to track maximum and minimum products
    max_product = min_product = result = nums[0]

    for i in range(1, len(nums)):
        # Swap max and min if the current element is negative
        if nums[i] < 0:
            max_product, min_product = min_product, max_product

        # Update max and min products considering the current element
        max_product = max(nums[i], max_product * nums[i])
        min_product = min(nums[i], min_product * nums[i])

        # Update the overall result
        result = max(result, max_product)

    return result

# Example usage:
nums1 = [2, 3, -2, 4]
print(max_product_subarray(nums1))  # Output: 6

nums2 = [-2, 0, -1]
print(max_product_subarray(nums2))  # Output: 0

#Task four:
def calculateMinimumHP(dungeon):
    if not dungeon or not dungeon[0]:
        return 1

    m, n = len(dungeon), len(dungeon[0])

    # Create a 2D array dp to store minimum health at each position
    dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]
    dp[m][n - 1] = dp[m - 1][n] = 1  # Set the minimum health required for the princess room

    for i in range(m - 1, -1, -1):
        for j in range(n - 1, -1, -1):
            min_health_on_exit = min(dp[i + 1][j], dp[i][j + 1])
            dp[i][j] = max(1, min_health_on_exit - dungeon[i][j])

    return dp[0][0]

# Example usage:
dungeon1 = [[-2, -3, 3], [-5, -10, 1], [10, 30, -5]]
print(calculateMinimumHP(dungeon1))  # Output: 7

dungeon2 = [[0]]
print(calculateMinimumHP(dungeon2))  # Output: 1

#Task Five
print("Enter item price")
item_price = int(input())
print("Enter how much paid")
how_much_paid = int(input())
amount = how_much_paid - item_price
d = []
while amount > 0:
    if amount >= 20:
        amount = amount-20
        d.append(20)
    else:
        if amount >= 10:
            amount = amount-10
            d.append(10)
        else:
            if amount >= 5:
                amount = amount-5
                d.append(5)
            else:
                if amount >= 2:
                    amount = amount-2
                    d.append(2)
                else:
                    if amount >= 1:
                        amount = amount-1
                        d.append(1)
                    else:
                        print("Something went wrong")
for i in range(0, len(d)):
    print(d[i])